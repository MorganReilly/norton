"""
message.py

Swagger Generated Message Model

This class is autogenerated by Swagger.
"""
from __future__ import absolute_import
from swagger_server.models.base_model_ import Model
from swagger_server import util


class Message(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int = None, channel_id: int = None, user_id: int = None, content: str = None,
                 timestamp: str = None, edited_timestamp: str = None):  # noqa: E501
        """Message - a model defined in Swagger

        :param id: The id of this Message.  # noqa: E501
        :type id: int
        :param channel_id: The channel_id of this Message.  # noqa: E501
        :type channel_id: int
        :param user_id: The user_id of this Message.  # noqa: E501
        :type user_id: int
        :param content: The content of this Message.  # noqa: E501
        :type content: str
        :param timestamp: The timestamp of this Message.  # noqa: E501
        :type timestamp: str
        :param edited_timestamp: The edited_timestamp of this Message.  # noqa: E501
        :type edited_timestamp: str
        """
        self.swagger_types = {
            'id': int,
            'channel_id': int,
            'user_id': int,
            'content': str,
            'timestamp': str,
            'edited_timestamp': str
        }

        self.attribute_map = {
            'id': 'id',
            'channel_id': 'channel_id',
            'user_id': 'user_id',
            'content': 'content',
            'timestamp': 'timestamp',
            'edited_timestamp': 'edited_timestamp'
        }
        self._id = id
        self._channel_id = channel_id
        self._user_id = user_id
        self._content = content
        self._timestamp = timestamp
        self._edited_timestamp = edited_timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Message of this Message.  # noqa: E501
        :rtype: Message
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Message.


        :return: The id of this Message.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Message.


        :param id: The id of this Message.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def channel_id(self) -> int:
        """Gets the channel_id of this Message.


        :return: The channel_id of this Message.
        :rtype: int
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id: int):
        """Sets the channel_id of this Message.


        :param channel_id: The channel_id of this Message.
        :type channel_id: int
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")  # noqa: E501

        self._channel_id = channel_id

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Message.


        :return: The user_id of this Message.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Message.


        :param user_id: The user_id of this Message.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def content(self) -> str:
        """Gets the content of this Message.


        :return: The content of this Message.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this Message.


        :param content: The content of this Message.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this Message.


        :return: The timestamp of this Message.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this Message.


        :param timestamp: The timestamp of this Message.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def edited_timestamp(self) -> str:
        """Gets the edited_timestamp of this Message.


        :return: The edited_timestamp of this Message.
        :rtype: str
        """
        return self._edited_timestamp

    @edited_timestamp.setter
    def edited_timestamp(self, edited_timestamp: str):
        """Sets the edited_timestamp of this Message.


        :param edited_timestamp: The edited_timestamp of this Message.
        :type edited_timestamp: str
        """
        if edited_timestamp is None:
            raise ValueError("Invalid value for `edited_timestamp`, must not be `None`")  # noqa: E501

        self._edited_timestamp = edited_timestamp
