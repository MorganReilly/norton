# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Channel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, user_id: str=None, capacity: int=None, type: str=None, position: int=None):  # noqa: E501
        """Channel - a model defined in Swagger

        :param id: The id of this Channel.  # noqa: E501
        :type id: int
        :param name: The name of this Channel.  # noqa: E501
        :type name: str
        :param user_id: The user_id of this Channel.  # noqa: E501
        :type user_id: str
        :param capacity: The capacity of this Channel.  # noqa: E501
        :type capacity: int
        :param type: The type of this Channel.  # noqa: E501
        :type type: str
        :param position: The position of this Channel.  # noqa: E501
        :type position: int
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'user_id': str,
            'capacity': int,
            'type': str,
            'position': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'user_id': 'user_id',
            'capacity': 'capacity',
            'type': 'type',
            'position': 'position'
        }
        self._id = id
        self._name = name
        self._user_id = user_id
        self._capacity = capacity
        self._type = type
        self._position = position

    @classmethod
    def from_dict(cls, dikt) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Channel of this Channel.  # noqa: E501
        :rtype: Channel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Channel.


        :return: The id of this Channel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Channel.


        :param id: The id of this Channel.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Channel.


        :return: The name of this Channel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Channel.


        :param name: The name of this Channel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Channel.


        :return: The user_id of this Channel.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Channel.


        :param user_id: The user_id of this Channel.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def capacity(self) -> int:
        """Gets the capacity of this Channel.


        :return: The capacity of this Channel.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: int):
        """Sets the capacity of this Channel.


        :param capacity: The capacity of this Channel.
        :type capacity: int
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501

        self._capacity = capacity

    @property
    def type(self) -> str:
        """Gets the type of this Channel.

        Type determines what whether the channel is voice, text, or some specialised char e.g. direct                message N.B. This will be updated in future once the appropiate ENUM values have been finalised.  # noqa: E501

        :return: The type of this Channel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Channel.

        Type determines what whether the channel is voice, text, or some specialised char e.g. direct                message N.B. This will be updated in future once the appropiate ENUM values have been finalised.  # noqa: E501

        :param type: The type of this Channel.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def position(self) -> int:
        """Gets the position of this Channel.


        :return: The position of this Channel.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position: int):
        """Sets the position of this Channel.


        :param position: The position of this Channel.
        :type position: int
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position
